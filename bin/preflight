const mysql = require('mysql');
const execSync = require('child_process').execSync;
const database = require('../database')[process.env.NODE_ENV || 'local'];
const fs = require('fs');

if (database == null) {
    throw new Error(`No database configured for environment: ${process.env.NODE_ENV}`);
}

console.log("starting preflight check");

const connection = {
    poe: {
        host: database.host,
        user: database.user,
        password: database.password,
        port: database.port,
        multipleStatements: true
    }
};

connection['poe'].connectionLimit = 10;

var conn_pool = mysql.createPool(connection['poe']);

conn_pool.query('CREATE DATABASE IF NOT EXISTS migrations');

var latest_migration = null;
var date_regex = /([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})/;

console.log("Checking migrations table ... ");
return conn_pool.query('SELECT * FROM information_schema.tables WHERE table_schema = \'migrations\' AND table_name = \'migrations\'', function (err, result) {
    if (err) throw err;

    if (result.length == 1) {
        console.log("Checking database version ... ");
        conn_pool.query('SELECT name FROM migrations.migrations ORDER BY id DESC LIMIT 1;', function (err, result) {
            if (err) throw err;

            if (result.length == 1) {
                latest_migration = result[0].name.substring(1);

                var latest = null;
                var latest_name = null;
                fs.readdirSync('migrations').forEach(file => {
                    if (!fs.lstatSync('migrations/' + file).isFile()) {
                        return;
                    }
                    var split = file.split("-");
                    var date_array = date_regex.exec(split[0]);
                    var date = new Date(
                        (+date_array[1]),
                        (+date_array[2]),
                        (+date_array[3]),
                        (+date_array[4]),
                        (+date_array[5]),
                        (+date_array[6])
                    );

                    if (latest != null && date.getTime() > latest.getTime()) {
                        latest = date;
                        latest_name = file.slice(0, -3);
                    } else {
                        latest = date;
                    }
                });

                if (latest_name == latest_migration) {
                    process.exit();
                } else {
                    execSync('db-migrate up');
                    process.exit();
                }
            }
        });
    } else {
        console.log("Running db-migrate");
        execSync('db-migrate up');

        process.exit();
    }
});
