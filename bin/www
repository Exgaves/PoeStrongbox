#!/usr/bin/env node

/**
 * Module dependencies.
 */

const config = require('../config');

var app = require('../app');
var debug = require('debug')('nodejs:server');


/**
 * Create HTTP server.
 */
if (typeof config.http_port != 'undefined' && config.http_port != null) {
    var http = require('http');
    var http_port = normalizePort(config.http_port || '3000');
    var httpServer = http.createServer(app);

    httpServer.listen(config.http_port);

    httpServer.on('error', onError);
    httpServer.on('listening', buildListeningCallback(httpServer));
}

/**
 * Create HTTPS server.
 */
if (typeof config.https_port != 'undefined' && config.https_port != null) {
    var https = require('https');
    var fs = require('fs');

    var privateKey  = fs.readFileSync(config.key, 'utf8');
    var certificate = fs.readFileSync(config.cert, 'utf8');
    var credentials = {key: privateKey, cert: certificate};

    var https_port = normalizePort(config.https_port || '3210');
    var httpsServer = https.createServer(credentials, app);

    // Listen on provided port, on all network interfaces.
    httpsServer.listen(config.https_port);

    httpsServer.on('error', onError);
    httpsServer.on('listening', buildListeningCallback(httpsServer));
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function buildListeningCallback(server) {
    return function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        console.log('HTTP Listening on ' + bind);
    }
}
